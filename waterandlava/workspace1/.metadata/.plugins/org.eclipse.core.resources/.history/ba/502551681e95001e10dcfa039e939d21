/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "hdmi_bg_controller.h"

#include "lw_usb/GenericMacros.h"
#include "lw_usb/GenericTypeDefs.h"
#include "lw_usb/MAX3421E.h"
#include "lw_usb/USB.h"
#include "lw_usb/usb_ch9.h"
#include "lw_usb/transfer.h"
#include "lw_usb/HID.h"

#include "xparameters.h"
#include "sleep.h"

#define W_KEY 26
#define A_KEY 4
#define D_KEY 7
#define R_ARROW 79
#define L_ARROW 80
#define UP_ARROW 82

#define ESC 41
#define ONE 30
#define TWO 31
#define THREE 32

extern HID_DEVICE hid_device;

static BYTE addr = 1; 				//hard-wired USB address
const char* const devclasses[] = { " Uninitialized", " HID Keyboard", " HID Mouse", " Mass storage" };

BYTE GetDriverandReport() {
	BYTE i;
	BYTE rcode;
	BYTE device = 0xFF;
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	xil_printf("Reached USB_STATE_RUNNING (0x40)\n");
	for (i = 1; i < USB_NUMDEVICES; i++) {
		tpl_ptr = GetDevtable(i);
		if (tpl_ptr->epinfo != NULL) {
			xil_printf("Device: %d", i);
			xil_printf("%s \n", devclasses[tpl_ptr->devclass]);
			device = tpl_ptr->devclass;
		}
	}
	//Query rate and protocol
	rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
	if (rcode) {   //error handling
		xil_printf("GetIdle Error. Error code: ");
		xil_printf("%x \n", rcode);
	} else {
		xil_printf("Update rate: ");
		xil_printf("%x \n", tmpbyte);
	}
	xil_printf("Protocol: ");
	rcode = XferGetProto(addr, 0, hid_device.interface, &tmpbyte);
	if (rcode) {   //error handling
		xil_printf("GetProto Error. Error code ");
		xil_printf("%x \n", rcode);
	} else {
		xil_printf("%d \n", tmpbyte);
	}
	return device;
}

BOOL check_keycode(int key, BOOT_KBD_REPORT kbdbuf){
	for( int i=0; i<6; i++ ){
		if(kbdbuf.keycode[i] == key){
			return TRUE;
		}
	}
	return FALSE;
}

int main()
{
    init_platform();

	// populates scene 0
	// generate_level1(0);
	generate_menu(0);

	BYTE rcode;
	BOOT_MOUSE_REPORT buf;		//USB mouse report
	BOOT_KBD_REPORT kbdbuf;

	BYTE runningdebugflag = 0;//flag to dump out a bunch of information when we first get to USB_STATE_RUNNING
	BYTE errorflag = 0; //flag once we get an error device so we don't keep dumping out state info
	BYTE device;

	xil_printf("initializing MAX3421E...\n");
	MAX3421E_init();
	xil_printf("initializing USB...\n");
	USB_init();

	// current scene
	int scene = 0;

	// if play is requested
	BOOL play = FALSE;

	//sprite coordinates/velocities
	int x[10];
	int y[10];
	int x_velocity[10];
	int y_velocity[10];
	BOOL grounded[10];

	for(int i=0; i<10; i++){
		grounded[i] = FALSE;
		x[i] = 0;
		y[i] = 0;
		x_velocity[i] = 0;
		y_velocity[i] = 0;
	}

	// //fireboy is sprite 0
	// set_sprite_index(0, FIREBOY_STAND);
	// set_sprite_active(0,1);
	// x[0] = 200;
	// y[0] = 100;
	// set_sprite_coord(0, x[0], y[0]);
	
	// //watergirl is sprite 1
	// set_sprite_index(1, WATERGIRL_STAND);
	// set_sprite_active(1,1);
	// x[1] = 100;
	// y[1] = 100;
	// set_sprite_coord(1, x[1], y[1]);

	// xil_printf("plate: (%d, %d), door: (%d, %d)\n", plate_to_door[0].x, plate_to_door[0].y, plate_to_door[1].x, plate_to_door[1].y);

	// while( 1 ){
	// 	remove_puzzledoor(scene, plate_to_door[1].x, plate_to_door[1].y);
	// 	sleep_MB(1);
	// 	make_puzzledoor(scene, plate_to_door[1].x, plate_to_door[1].y);
	// 	sleep_MB(1);
	// }

	//menu will be on scene 2
	generate_menu(2);
	set_scene(2);

	while (1) {
		// xil_printf("."); //A tick here means one loop through the USB main handler
		MAX3421E_Task();
		USB_Task();
		if (GetUsbTaskState() == USB_STATE_RUNNING) {
			if (!runningdebugflag) {
				runningdebugflag = 1;
				device = GetDriverandReport();
			} else if (device == 1) {
				// //run keyboard debug polling
				 rcode = kbdPoll(&kbdbuf);

				//checks for level selection
				if( check_keycode(ESC, kbdbuf) ){
					play = FALSE;
					scene = 2;
					set_scene(scene);
				}
				//loads level 1
				else if( check_keycode(ONE, kbdbuf) ){
					play = TRUE;
					generate_level1(0);

					//fireboy is sprite 0
					set_sprite_index(0, FIREBOY_STAND);
					set_sprite_active(0,1);
					x[0] = 200;
					y[0] = 100;
					set_sprite_coord(0, x[0], y[0]);
					
					//watergirl is sprite 1
					set_sprite_index(1, WATERGIRL_STAND);
					set_sprite_active(1,1);
					x[1] = 100;
					y[1] = 200;
					set_sprite_coord(1, x[1], y[1]);
					scene = 0;
					set_scene(scene);
				}
				//loads level 2
				else if( check_keycode(TWO, kbdbuf) ){
					play = TRUE;
					generate_level2(0);
					//fireboy is sprite 0
					set_sprite_index(0, FIREBOY_STAND);
					set_sprite_active(0,1);
					x[0] = 300;
					y[0] = 350;
					set_sprite_coord(0, x[0], y[0]);
					
					//watergirl is sprite 1
					set_sprite_index(1, WATERGIRL_STAND);
					set_sprite_active(1,1);
					x[1] = 350;
					y[1] = 350;
					set_sprite_coord(1, x[1], y[1]);
					scene = 0;
					set_scene(scene);
				}
				//loads level 3
				else if( check_keycode(THREE, kbdbuf) ){
					play = TRUE;
					generate_level3(0);
					//fireboy is sprite 0
					set_sprite_index(0, FIREBOY_STAND);
					set_sprite_active(0,1);
					x[0] = 100;
					y[0] = 300;
					set_sprite_coord(0, x[0], y[0]);
					
					//watergirl is sprite 1
					set_sprite_index(1, WATERGIRL_STAND);
					set_sprite_active(1,1);
					x[1] = 400;
					y[1] = 100;
					set_sprite_coord(1, x[1], y[1]);
					scene = 0;
					set_scene(scene);
				}

				//exit door interaction
				if( get_tile(scene, x[0], y[0] + SPRITE_SIZE_Y - 1) == RED_DOOR && get_tile(scene, x[1], y[1] + SPRITE_SIZE_Y - 1) == BLUE_DOOR ){
					play = FALSE;
					scene = 2;
					set_scene(scene);
				}

				if( play ){
				//fireboy movement
				//fireboy left
					if( check_keycode(A_KEY, kbdbuf) ){
						x_velocity[0] = -SPRITE_SPEED_X;
					}
					//fireboy right
					else if( check_keycode(D_KEY, kbdbuf) ){
						x_velocity[0] = SPRITE_SPEED_X;
					}
					//not moving
					else{
						x_velocity[0] = 0;
					}
					//fireboy jump
					if( check_keycode(W_KEY, kbdbuf) && grounded[0] == TRUE ){
						y[0]--;
						y_velocity[0] = -SPRTIE_SPEED_Y;
						grounded[0] = FALSE;
					}
					//animation
					if( x_velocity[0] < 0 ){
						set_sprite_index(0, FIREBOY_RIGHT);
					}else if( x_velocity[0] > 0 ){
						set_sprite_index(0, FIREBOY_LEFT);
					}else {
						set_sprite_index(0, FIREBOY_STAND);
					}


					//watergirl movement
					//watergirl left
					if( check_keycode(L_ARROW, kbdbuf) ){
						x_velocity[1] = -SPRITE_SPEED_X;
					}
					//watergirl right
					else if( check_keycode(R_ARROW, kbdbuf) ){
						x_velocity[1] = SPRITE_SPEED_X;
					}
					//not moving
					else{
						x_velocity[1] = 0;
					}
					//watergirl jump
					if( check_keycode(UP_ARROW, kbdbuf) && grounded[1] == TRUE ){
						y[1]--;
						y_velocity[1] = -SPRTIE_SPEED_Y;
						grounded[1] = FALSE;
					}
					//animation
					if( x_velocity[1] < 0 ){
						set_sprite_index(1, WATERGIRL_RIGHT);
					}else if( x_velocity[1] > 0 ){
						set_sprite_index(1, WATERGIRL_LEFT);
					}else {
						set_sprite_index(1, WATERGIRL_STAND);
					}

					//reset pressure plate status
					for(int i=0; i<NUM_PLATES*2; i++){
						plate_to_door[i].active = FALSE;
					}

					//interaction logic
					for( int i=0; i<2; i++){
						//right walls/puzzle doors
						if( get_tile(scene, x[i] + SPRITE_SIZE_X, y[i]) == WALL || get_tile(scene, x[i] + SPRITE_SIZE_X, y[i]) == PUZZLE_DOOR ){
							//stop x motion
							x_velocity[i] = 0;
						}
						//left walls/puzzle doors
						else if( get_tile(scene, x[i], y[i]) == WALL || get_tile(scene, x[i], y[i]) == PUZZLE_DOOR ){
							x_velocity[i] = 0;
						}

						//bottom floors
						if( get_tile(scene, x[i], y[i] + SPRITE_SIZE_Y) == FLOOR ){
							//stop y motion
							y_velocity[i] = 0;
							grounded[i] = TRUE;
						}
						//top floors
						else if( get_tile(scene, x[i], y[i]) == FLOOR ){
							y_velocity[i] = 0;
						}
						//not touching a floor
						else {
							grounded[i] = FALSE;
						}

						//pressure plate interaction
						if( get_tile(scene, x[i], y[i] + SPRITE_SIZE_Y - 1) == PRESSURE ){
							//find the corresponding pressure plate
							for(int j=0; j<NUM_PLATES*2-1; j+=2){
								if ( ( plate_to_door[j].x == (int)(x[i]/8) || plate_to_door[j].x == (int)(x[i]/8) + 1 )
									&& plate_to_door[j].y == (int)((y[i] + SPRITE_SIZE_Y - 1)/16) + ROWS*scene ){
									plate_to_door[j].active = TRUE;
									//remove corresponding door
									remove_puzzledoor(scene, plate_to_door[j+1].x, plate_to_door[j+1].y);
									break;
								}
							}
						}

						//lava interaction
						if( get_tile(scene, x[i], y[i] + SPRITE_SIZE_Y - 1) == LAVA && i == 1 ){
							set_sprite_active(i, 0);
							play = FALSE;
						}

						//water interaction
						if( get_tile(scene, x[i], y[i] + SPRITE_SIZE_Y - 1) == WATER && i == 0 ){
							set_sprite_active(i, 0);
							play = FALSE;
						}

						//gravity
						if( grounded[i] == FALSE ){
							y_velocity[i] += 1;
						}

						//apply x velocity
						x[i] += x_velocity[i];
						//checks if there is a wall
						if( x_velocity[i] > 0 ){
							while(get_tile(scene, x[i] + SPRITE_SIZE_X, y[i]) == WALL || get_tile(scene, x[i] + SPRITE_SIZE_X, y[i]) == PUZZLE_DOOR){
								x[i]--;
							}
						}else {
							while( get_tile(scene, x[i], y[i]) == WALL || get_tile(scene, x[i], y[i]) == PUZZLE_DOOR ){
								x[i]++;
							}
						}

						//apply y velocity
						y[i] += y_velocity[i];
						//checks if there is a floor below
						if( y_velocity[i] > 0 ){
							while( get_tile(scene, x[i], y[i] + SPRITE_SIZE_Y - 1) == FLOOR ){
								y[i]--;
							}
						}
						//checks if there is a floor above
						else if (y_velocity[i] < 0) {
							while( get_tile(scene, x[i], y[i] + 1) == FLOOR ){
								y[i]++;
							}
						}
						//checks for all other instances
						else {
							if( get_tile(scene, x[i], y[i] + SPRITE_SIZE_Y - 1) == FLOOR ){
								//determines how much to change by
								int min=100;
								BOOL left = FALSE;

								//try left
								for( int j=0; j<100; j++ ){
									if( get_tile(scene, x[i] - j, y[i] + SPRITE_SIZE_Y - 1) == BACKGROUND ){
										min = j;
										left = TRUE;
										break;
									}
								}

								//try right
								for( int j=0; j<100; j++ ){
									if( get_tile(scene, x[i] + j, y[i] + SPRITE_SIZE_Y - 1) == BACKGROUND ){
										if(min > j){
											min = j;
											left = FALSE;
										}
										break;
									}
								}

								if (min == 100)
									continue;
								else if (left)
									x[i] -= min;
								else
									x[i] += min;
							}
						}

						//assigns new coordinates
						set_sprite_coord(i, x[i], y[i]);
					}

					//checks which pressure plates are not active anymore
					for(int i=0; i<NUM_PLATES*2-1; i+=2){
						//if they are not active make sure the door is in place
						if( plate_to_door[i].active == FALSE && plate_to_door[i].x != 0 && plate_to_door[i].y != 0  ){
							make_puzzledoor(scene, plate_to_door[i+1].x, plate_to_door[i+1].y);
						}
					}
				} else{
					//when not playing, the sprites are deactivated
					for( int i=0; i<10; i++){
						set_sprite_active(i, 0);
					}
				}
				usleep_MB(15000);
			}

			else if (device == 2) {
				rcode = mousePoll(&buf);
				if (rcode == hrNAK) {
					//NAK means no new data
					continue;
				} else if (rcode) {
					xil_printf("Rcode: ");
					xil_printf("%x \n", rcode);
					continue;
				}
				xil_printf("X displacement: ");
				xil_printf("%d ", (signed char) buf.Xdispl);
				xil_printf("Y displacement: ");
				xil_printf("%d ", (signed char) buf.Ydispl);
				xil_printf("Buttons: ");
				xil_printf("%x\n", buf.button);
			}
		} else if (GetUsbTaskState() == USB_STATE_ERROR) {
			if (!errorflag) {
				errorflag = 1;
				xil_printf("USB Error State\n");
				//print out string descriptor here
			}
		} else //not in USB running state
		{

			xil_printf("USB task state: ");
			xil_printf("%x\n", GetUsbTaskState());
			if (runningdebugflag) {	//previously running, reset USB hardware just to clear out any funky state, HS/FS etc
				runningdebugflag = 0;
				MAX3421E_init();
				USB_init();
			}
			errorflag = 0;
		}

	}
   cleanup_platform();

    return 0;
}
